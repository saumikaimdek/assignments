Q) Monk and Inversions
Monk's best friend Micro, who happen to be an awesome programmer, got him an integer matrix M of size NxN for his birthday. Monk is taking coding classes from Micro. They have just completed array inversions and Monk was successful in writing a program to count the number of inversions in an array. Now, Micro has asked Monk to find out the number of inversion in the matrix M. Number of inversions, in a matrix is defined as the number of unordered pairs of cells {(i,j),(p,q)}  such that M[i][j]> M[p][q & i<=p&j<=q] .
Monk is facing a little trouble with this task and since you did not got him any birthday gift, you need to help him with this task.

Ans)


import java.util.Scanner;

class Matrixclass {
    public static void main(String args[] ) throws Exception {

        Scanner sc = new Scanner(System.in);
        int mat = sc.nextInt();  
        while(mat != 0){
            
            int n = sc.nextInt(); 
            int[][] a = new int[n][n];
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    a[i][j] = sc.nextInt(); 
                }
            }

            int count = 0;

            for (int i = 0; i < n; i++){
                for (int s = 0; s < n; s++){
                    for (int j = 0; j <= i; j++){
                        for (int m = 0; m <= s; m++){
                            if (a[i][s] < a[j][m]){ 
                                count++; 
                            }
                        }
                    }
                }
            }

            System.out.println(count); 

            mat--;

        }

    }
}
